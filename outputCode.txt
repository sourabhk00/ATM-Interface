#include <iostream>
#include <string>
#include <vector>
#include <iomanip> // For std::fixed and std::setprecision
#include <limits>  // For std::numeric_limits
#include <cctype>  // For ::tolower, ::toupper
#include <algorithm> // For std::transform

// Helper function to trim leading/trailing whitespace from a string
std::string trim(const std::string& str) {
    size_t first = str.find_first_not_of(" \t\n\r");
    if (std::string::npos == first) {
        return str; // No non-whitespace characters
    }
    size_t last = str.find_last_not_of(" \t\n\r");
    return str.substr(first, (last - first + 1));
}

class ATM {
private:
    // In C++, std::cin is used directly for input, no static Scanner object needed.
    static double balance; // Default balance
    static std::vector<std::string> transactionHistory;
    static int pin;
    static std::string accountType;
    static bool isRegistered;

    // Private static methods
    static void registerUser();
    static bool authenticateUser();
    static void showMenu();
    static void viewBalance();
    static void depositMoney();
    static void withdrawMoney();
    static void viewTransactionHistory();
    static void changePin();

public:
    // Public static method (main equivalent logic)
    static void run();
};

// Initialize static members outside the class definition
double ATM::balance = 1000.00; // Default balance
std::vector<std::string> ATM::transactionHistory;
int ATM::pin;
std::string ATM::accountType;
bool ATM::isRegistered = false;

// Main function equivalent
void ATM::run() {
    std::cout << "🏦 Welcome to the ATM Interface" << std::endl;

    registerUser(); // First-time registration
    if (authenticateUser()) {
        showMenu();
    } else {
        std::cout << "❌ Too many incorrect attempts. Exiting..." << std::endl;
    }
}

// Private static method implementations
void ATM::registerUser() {
    std::cout << "\n🔐 Set up your ATM account:" << std::endl;

    // Set PIN
    std::cout << "Enter a 4-digit PIN: ";
    while (true) {
        std::cin >> pin;
        // Check if input was successful and consume the rest of the line
        if (std::cin.fail()) {
            std::cout << "Invalid input. Please enter a number: ";
            std::cin.clear(); // Clear error flags
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
            continue; // Ask for input again
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

        if (std::to_string(pin).length() == 4) {
            break;
        } else {
            std::cout << "PIN must be 4 digits. Try again: ";
        }
    }

    // Set account type
    // std::cin.ignore() was called after reading PIN, so buffer should be clear for getline
    std::cout << "Enter account type (Savings / Current): ";
    while (true) {
        std::getline(std::cin, accountType);
        accountType = trim(accountType); // Trim whitespace
        std::string lowerAccountType = accountType;
        std::transform(lowerAccountType.begin(), lowerAccountType.end(), lowerAccountType.begin(), ::tolower); // Convert to lowercase

        if (lowerAccountType == "savings" || lowerAccountType == "current") {
            // Capitalize first letter
            if (!accountType.empty()) {
                accountType[0] = std::toupper(accountType[0]);
                std::transform(accountType.begin() + 1, accountType.end(), accountType.begin() + 1, ::tolower); // Ensure rest is lowercase
            } else {
                 // Handle empty input case, though trim should prevent this if loop condition is met
                 accountType = lowerAccountType; // Use the lower case version if empty after trim
            }
            break;
        } else {
            std::cout << "Invalid type. Enter 'Savings' or 'Current': ";
        }
    }

    isRegistered = true;
    std::cout << "✅ Registration complete!\n" << std::endl;
}

bool ATM::authenticateUser() {
    int attempts = 0;
    while (attempts < 3) {
        std::cout << "Enter your 4-digit PIN to login: ";
        int enteredPin;
        std::cin >> enteredPin;
        // Check if input was successful and consume the rest of the line
        if (std::cin.fail()) {
            std::cout << "Invalid input. Please enter a number." << std::endl;
            std::cin.clear(); // Clear error flags
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
            attempts++; // Count attempt even on invalid input type
            continue; // Ask for input again
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

        if (enteredPin == pin) {
            return true;
        } else {
            attempts++;
            std::cout << "Incorrect PIN. Try again." << std::endl;
        }
    }
    return false;
}

void ATM::showMenu() {
    int choice;
    do {
        std::cout << "\n----- 🧾 ATM Menu -----" << std::endl;
        std::cout << "Account Type: " << accountType << std::endl;
        std::cout << "1. View Balance" << std::endl;
        std::cout << "2. Deposit Money" << std::endl;
        std::cout << "3. Withdraw Money" << std::endl;
        std::cout << "4. Transaction History" << std::endl;
        std::cout << "5. Change ATM PIN" << std::endl;
        std::cout << "6. Exit" << std::endl;
        std::cout << "Choose an option: ";
        std::cin >> choice;

        // Check if input was successful and consume the rest of the line
        if (std::cin.fail()) {
            std::cout << "Invalid input. Please enter a number." << std::endl;
            std::cin.clear(); // Clear error flags
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
            choice = 0; // Set to an invalid choice to continue the loop
            continue; // Skip switch and go to next loop iteration
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character


        switch (choice) {
            case 1:
                viewBalance();
                break;
            case 2:
                depositMoney();
                break;
            case 3:
                withdrawMoney();
                break;
            case 4:
                viewTransactionHistory();
                break;
            case 5:
                changePin();
                break;
            case 6:
                std::cout << "👋 Thank you for using the ATM. Goodbye!" << std::endl;
                break;
            default:
                std::cout << "Invalid option. Try again." << std::endl;
        }
    } while (choice != 6);
}

void ATM::viewBalance() {
    // Use std::fixed and std::setprecision for formatted output
    std::cout << "💰 Current Balance: ₹" << std::fixed << std::setprecision(2) << balance << std::endl;
}

void ATM::depositMoney() {
    std::cout << "Enter amount to deposit: ₹";
    double amount;
    std::cin >> amount;
    // Check if input was successful and consume the rest of the line
    if (std::cin.fail()) {
        std::cout << "❌ Invalid input. Please enter a number." << std::endl;
        std::cin.clear(); // Clear error flags
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
        return; // Exit the method
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

    if (amount > 0) {
        balance += amount;
        // Format amount to 2 decimal places for transaction history string
        std::stringstream ss;
        ss << std::fixed << std::setprecision(2) << amount;
        transactionHistory.push_back("Deposited: ₹" + ss.str());
        std::cout << "✅ Deposit successful." << std::endl;
    } else {
        std::cout << "❌ Invalid amount." << std::endl;
    }
}

void ATM::withdrawMoney() {
    std::cout << "Enter amount to withdraw: ₹";
    double amount;
    std::cin >> amount;
    // Check if input was successful and consume the rest of the line
    if (std::cin.fail()) {
        std::cout << "❌ Invalid input. Please enter a number." << std::endl;
        std::cin.clear(); // Clear error flags
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
        return; // Exit the method
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

    if (amount > 0 && amount <= balance) {
        balance -= amount;
        // Format amount to 2 decimal places for transaction history string
        std::stringstream ss;
        ss << std::fixed << std::setprecision(2) << amount;
        transactionHistory.push_back("Withdrew: ₹" + ss.str());
        std::cout << "✅ Withdrawal successful." << std::endl;
    } else {
        std::cout << "❌ Insufficient balance or invalid amount." << std::endl;
    }
}

void ATM::viewTransactionHistory() {
    std::cout << "\n📜 Transaction History:" << std::endl;
    if (transactionHistory.empty()) {
        std::cout << "No transactions yet." << std::endl;
    } else {
        for (const std::string& transaction : transactionHistory) {
            std::cout << "- " << transaction << std::endl;
        }
    }
}

void ATM::changePin() {
    std::cout << "Enter your current PIN: ";
    int currentPin;
    std::cin >> currentPin;
    // Check if input was successful and consume the rest of the line
    if (std::cin.fail()) {
        std::cout << "❌ Invalid input. Please enter a number." << std::endl;
        std::cin.clear(); // Clear error flags
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
        return; // Exit the method
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

    if (currentPin == pin) {
        std::cout << "Enter new 4-digit PIN: ";
        int newPin;
        std::cin >> newPin;
        // Check if input was successful and consume the rest of the line
        if (std::cin.fail()) {
            std::cout << "❌ Invalid input. Please enter a number." << std::endl;
            std::cin.clear(); // Clear error flags
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
            return; // Exit the method
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume the newline character

        if (std::to_string(newPin).length() == 4) {
            pin = newPin;
            std::cout << "✅ PIN changed successfully!" << std::endl;
        } else {
            std::cout << "❌ New PIN must be 4 digits." << std::endl;
        }
    } else {
        std::cout << "❌ Incorrect current PIN." << std::endl;
    }
}

// C++ main function
int main() {
    ATM::run(); // Call the static run method to start the ATM logic
    return 0;
}
